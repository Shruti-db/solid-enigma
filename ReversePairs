class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }
    
    public int mergeSort(int[] nums, int low, int high){
            int mid = (low+high)/2;
            if(low>=high) return 0;
            int inv = mergeSort(nums, low, mid);
            inv+=mergeSort(nums, mid+1, high);
            inv+= merge(nums, low, mid, high);
        return inv;
    }
    
    public int merge(int [] nums, int low, int mid, int high){
        int cnt =0;
        int j = mid+1;
        for(int i=low; i<=mid; i++){
            while(j<=high && nums[i]> (2* (long)nums[j])){
                j++;
            }
            cnt+= j-(mid+1);
        }
        
        ArrayList<Integer> ans = new ArrayList();
        int left = low, right = mid+1;
        while(left <= mid && right <= high){
            if(nums[left]<nums[right]){
                ans.add(nums[left++]);
            }
            else{
                ans.add(nums[right++]);
            }
        }
        while(left<=mid){
            ans.add(nums[left++]);
        }
        while(right<=high){
            ans.add(nums[right++]);
        }
        for(int i=low; i<=high; i++){
            nums[i] = ans.get(i-low);
            //System.out.println(nums[i]);
        }
        return cnt;
    }
}
