//here basically we will be modifying the merge operation of merge sort
//It's a bit tricky one, try to write the code by yourself everytime you look back
class Solution{
   private int _mergeSort(int [] arr, int [] temp, int low, int high){
       int mid =0, inv_count=0;
       if(high>low){
          mid = (high+low)/2;
          inv_count+=_mergeSort(arr, temp, low, mid);
          inv_count+=mergeSort(arr, temp, mid+1, high);
          
          inv_count+=merge(arr, temp, low, mid+1, high);
       }
       return inv_count;
     }
     
    private int merge(int [] arr, int [] temp, int low, int mid, int high){
        
        int i, j, k;
        i = low, j = mid, k= left;
        int inv_count =0;
        while(i<=mid-1 && j<=right){
          if(arr[i]<arr[j])
             temp[k++] = arr[i++];
           else{
              temp[k++] = arr[j++];
              inv_count+=mid-i;
              }
        }
        while(i<=mid-1)
          temp[k++]= arr[i++];
        while(j<=right)
          temp[k++] = arr[j++];
        for(int i=low; i<=high; i++){
          arr[i] = temp[i];
        }
        return inv_count;
    
    }

}
