/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
/*
Remember the following steps:
1) Insert a copy in between
2) current->next->random = current->random->next
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head==NULL)
             return head;
        Node *temp = head;
        while(temp!=NULL){
            Node *newNode = new Node(temp->val);
            newNode->next= temp->next;
            temp->next= newNode;
            temp = newNode->next;
        }
        temp = head;
        while(temp){
            if(temp->next)
            temp->next->random = temp->random ?temp->random->next:temp->random;
            temp = temp->next?temp->next->next:temp->next;
        }
       Node* original = head, *copy = head->next;
       temp = copy;
    while (original && copy)
    {
        original->next =
         original->next? original->next->next : original->next;
  
        copy->next = copy->next?copy->next->next:copy->next;
        original = original->next;
        copy = copy->next;
    }
        return temp;
       
    }
};
