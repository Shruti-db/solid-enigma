class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
      int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>>visited(m, vector<bool>(n, 0));
        int count =0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if( grid[i][j]=='1'&& visited[i][j]==0 ){
                    DFS(grid, visited,i, j, m, n);
                   // cout<<i<<" "<<j<<" "<<count<<endl;
                    count++;
                }
            }
        }
        return count;
        
    }
    void DFS(vector<vector<char>>&grid, vector<vector<bool>>&visited, int i, int j, int m, int n){
        visited[i][j] = 1;
        if(i-1>=0 && grid[i][j]=='1' && visited[i-1][j] == 0)DFS(grid, visited, i-1, j, m, n);
        if(j-1>=0 && grid[i][j]=='1' && visited[i][j-1] == 0)DFS(grid, visited, i, j-1, m, n);
        if(i+1<m && grid[i][j]=='1' && visited[i+1][j] == 0)DFS(grid, visited, i+1, j, m, n);
        if(j+1<n && grid[i][j]=='1' && visited[i][j+1] == 0)DFS(grid, visited,  i, j+1, m, n);
        
            
    }
};
